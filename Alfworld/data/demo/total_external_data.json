[
    {
        "episode": "The robot uses the remote control to turn on the TV in the living room.",
        "fact_set": "{robot_at(living_room, T), at(remote_control, living_room, T), action(use(remote_control), T)}",
        "expert_rule": ":- action(use(O), T), robot_at(L, T), not at(O, L, T).",
        "action_type": "use_precondition1",
        "positive": "true",
        "task": "entertainment setup",
        "scene": "Beechwood_0_int",
        "embodiment": "robot",
        "reference": "clean a hot water dispenser, freeze lasagna"
    },
    {
        "episode": "The robot is in the bedroom and tries to use the coffee maker that is in the kitchen.",
        "fact_set": "{robot_at(bedroom, T), at(coffee_maker, kitchen, T), action(use(coffee_maker), T)}",
        "expert_rule": ":- action(use(O), T), robot_at(L, T), not at(O, L, T).",
        "action_type": "use_precondition1",
        "positive": "false",
        "task": "make coffee",
        "scene": "Pomaria_1_int",
        "embodiment": "robot",
        "reference": "store brownies, clean a book, baking sugar cookies"
    },
    {
        "episode": "The robot uses a magnifying glass to examine a rare coin in the study.",
        "fact_set": "{holding(rare_coin, T), robot_at(study, T), at(magnifying_glass, study, T), action(use(magnifying_glass), T), is_looked(rare_coin, magnifying_glass, T+1)}",
        "expert_rule": "is_looked(O1, O2, T+1) :- action(use(O2), T), holding(O1, T), robot_at(L, T), at(O2,L,T).",
        "action_type": "use_effect1",
        "positive": "true",
        "task": "examine collectibles",
        "scene": "Beechwood_0_int",
        "embodiment": "robot",
        "reference": "clean a hot water dispenser, freeze lasagna"
    },
    {
        "episode": "In the kitchen, the robot uses a food thermometer to check the temperature of a roast in the oven.",
        "fact_set": "{holding(roast, T), robot_at(kitchen, T), at(food_thermometer, kitchen, T), action(use(food_thermometer), T), is_looked(roast, food_thermometer, T+1)}",
        "expert_rule": "is_looked(O1, O2, T+1) :- action(use(O2), T), holding(O1, T), robot_at(L, T), at(O2,L,T).",
        "action_type": "use_effect1",
        "positive": "true",
        "task": "cook meal",
        "scene": "Pomaria_1_int",
        "embodiment": "robot",
        "reference": "store brownies, clean a book, baking sugar cookies"
    },
    {
        "episode": "The robot tries to use a microscope in the living room to examine a dust particle, but the microscope is in the study.",
        "fact_set": "{holding(dust_particle, T), robot_at(living_room, T), at(microscope, study, T), action(use(microscope), T), not is_looked(dust_particle, microscope, T+1)}",
        "expert_rule": "is_looked(O1, O2, T+1) :- action(use(O2), T), holding(O1, T), robot_at(L, T), at(O2,L,T).",
        "action_type": "use_effect1",
        "positive": "false",
        "task": "scientific observation",
        "scene": "Wainscott_1_int",
        "embodiment": "robot",
        "reference": "decorating for religious ceremony, stash snacks in your room, disinfect laundry"
    },
    {
        "episode": "The robot uses a barcode scanner to check the price of a product in the storage room.",
        "fact_set": "{holding(product, T), robot_at(storage_room, T), at(barcode_scanner, storage_room, T), action(use(barcode_scanner), T), is_looked(product, barcode_scanner, T+1)}",
        "expert_rule": "is_looked(O1, O2, T+1) :- action(use(O2), T), holding(O1, T), robot_at(L, T), at(O2,L,T).",
        "action_type": "use_effect1",
        "positive": "true",
        "task": "inventory management",
        "scene": "Benevolence_1_int",
        "embodiment": "robot",
        "reference": "hanging blinds, sorting volunteer materials, wash baby bottles"
    },
    {
        "episode": "The robot uses a microscope to examine a cell sample, which wasn't previously observed.",
        "fact_set": "{not is_looked(cell_sample, microscope, T), action(use(microscope), T), is_looked(cell_sample, microscope, T+1)}",
        "expert_rule": ":- is_looked(O1, O2, T+1), not is_looked(O1, O2, T), not action(use(O2), T).",
        "action_type": "look_precondition1",
        "positive": "true",
        "task": "scientific research",
        "scene": "Beechwood_0_int",
        "embodiment": "robot",
        "reference": "clean a hot water dispenser, freeze lasagna"
    },
    {
        "episode": "The robot uses a metal detector to scan a section of the garden that wasn't previously examined.",
        "fact_set": "{not is_looked(garden_section, metal_detector, T), action(use(metal_detector), T), is_looked(garden_section, metal_detector, T+1)}",
        "expert_rule": ":- is_looked(O1, O2, T+1), not is_looked(O1, O2, T), not action(use(O2), T).",
        "action_type": "look_precondition1",
        "positive": "true",
        "task": "search for buried objects",
        "scene": "Pomaria_1_int",
        "embodiment": "robot",
        "reference": "store brownies, clean a book, baking sugar cookies"
    },
    {
        "episode": "A book suddenly becomes examined by a magnifying glass without the robot using the magnifying glass.",
        "fact_set": "{not is_looked(book, magnifying_glass, T), not action(use(magnifying_glass), T), is_looked(book, magnifying_glass, T+1)}",
        "expert_rule": ":- is_looked(O1, O2, T+1), not is_looked(O1, O2, T), not action(use(O2), T).",
        "action_type": "look_precondition1",
        "positive": "false",
        "task": "examine literature",
        "scene": "Wainscott_1_int",
        "embodiment": "robot",
        "reference": "decorating for religious ceremony, stash snacks in your room, disinfect laundry"
    },
    {
        "episode": "The robot is holding a book and places it on the living room table.",
        "fact_set": "{holding(book, T), robot_at(living_room, T), action(put_down(book, living_room_table), T)}",
        "expert_rule": ":- action(put_down(O, _), T), not holding(O, T).",
        "action_type": "put_down_precondition1",
        "positive": "true",
        "task": "organize living room",
        "scene": "Beechwood_0_int",
        "embodiment": "robot",
        "reference": "clean a hot water dispenser, freeze lasagna"
    },
    {
        "episode": "The robot tries to put down a cup on the kitchen counter, but it's not holding anything.",
        "fact_set": "{not holding(cup, T), robot_at(kitchen, T), action(put_down(cup, kitchen_counter), T)}",
        "expert_rule": ":- action(put_down(O, _), T), not holding(O, T).",
        "action_type": "put_down_precondition1",
        "positive": "false",
        "task": "clean kitchen",
        "scene": "Pomaria_1_int",
        "embodiment": "robot",
        "reference": "store brownies, clean a book, baking sugar cookies"
    },
    {
        "episode": "The robot, standing in the living room, puts down a book on the coffee table.",
        "fact_set": "{holding(book, T), robot_at(living_room, T), at(coffee_table, living_room, T), action(put_down(book, coffee_table), T)}",
        "expert_rule": ":- action(put_down(_, L), T), not robot_at(L, T).",
        "action_type": "put_down_precondition2",
        "positive": "true",
        "task": "organize living room",
        "scene": "Beechwood_0_int",
        "embodiment": "robot",
        "reference": "clean a hot water dispenser, freeze lasagna"
    },
    {
        "episode": "The robot, in the kitchen, attempts to put down a plate on the dining room table.",
        "fact_set": "{holding(plate, T), robot_at(kitchen, T), at(dining_table, dining_room, T), action(put_down(plate, dining_table), T)}",
        "expert_rule": ":- action(put_down(_, L), T), not robot_at(L, T).",
        "action_type": "put_down_precondition2",
        "positive": "false",
        "task": "set table",
        "scene": "Pomaria_1_int",
        "embodiment": "robot",
        "reference": "store brownies, clean a book, baking sugar cookies"
    },
    {
        "episode": "The robot, in the bedroom, places a folded shirt into the wardrobe.",
        "fact_set": "{holding(folded_shirt, T), robot_at(bedroom, T), at(wardrobe, bedroom, T), action(put_down(folded_shirt, wardrobe), T)}",
        "expert_rule": ":- action(put_down(_, L), T), not robot_at(L, T).",
        "action_type": "put_down_precondition2",
        "positive": "true",
        "task": "organize clothes",
        "scene": "Wainscott_1_int",
        "embodiment": "robot",
        "reference": "decorating for religious ceremony, stash snacks in your room, disinfect laundry"
    },
    {
        "episode": "The robot, in the garage, tries to put a tool back in the kitchen drawer.",
        "fact_set": "{holding(tool, T), robot_at(garage, T), at(kitchen_drawer, kitchen, T), action(put_down(tool, kitchen_drawer), T)}",
        "expert_rule": ":- action(put_down(_, L), T), not robot_at(L, T).",
        "action_type": "put_down_precondition2",
        "positive": "false",
        "task": "organize tools",
        "scene": "Ihlen_0_int",
        "embodiment": "robot",
        "reference": "de-clutter your garage, sorting household items, set up a home office in your garage"
    },
    {
        "episode": "The robot continues to hold a book while moving from the living room to the study.",
        "fact_set": "{holding(book, T), not action(put_down(book, _), T), step(T+1), holding(book, T+1)}",
        "expert_rule": "holding(O, T+1) :- holding(O, T), not action(put_down(O, _), T), step(T+1).",
        "action_type": "put_down_effect1",
        "positive": "true",
        "task": "relocate book",
        "scene": "Beechwood_0_int",
        "embodiment": "robot",
        "reference": "clean a hot water dispenser, freeze lasagna"
    },
    {
        "episode": "The robot holds a dirty plate while opening the dishwasher.",
        "fact_set": "{holding(dirty_plate, T), action(open(dishwasher), T), not action(put_down(dirty_plate, _), T), step(T+1), holding(dirty_plate, T+1)}",
        "expert_rule": "holding(O, T+1) :- holding(O, T), not action(put_down(O, _), T), step(T+1).",
        "action_type": "put_down_effect1",
        "positive": "true",
        "task": "load dishwasher",
        "scene": "Pomaria_1_int",
        "embodiment": "robot",
        "reference": "store brownies, clean a book, baking sugar cookies"
    },
    {
        "episode": "The robot puts a book on the shelf, and the book is now on the shelf.",
        "fact_set": "{holding(book, T), action(put_down(book, shelf), T), at(book, shelf, T+1)}",
        "expert_rule": "at(O, L, T+1) :- action(put_down(O, L), T).",
        "action_type": "put_down_effect2",
        "positive": "true",
        "task": "organize bookshelf",
        "scene": "Beechwood_0_int",
        "embodiment": "robot",
        "reference": "clean a hot water dispenser, freeze lasagna"
    },
    {
        "episode": "The robot puts a plate on the table, but the plate ends up on the floor.",
        "fact_set": "{holding(plate, T), action(put_down(plate, table), T), at(plate, floor, T+1)}",
        "expert_rule": "at(O, L, T+1) :- action(put_down(O, L), T).",
        "action_type": "put_down_effect2",
        "positive": "false",
        "task": "set table",
        "scene": "Pomaria_1_int",
        "embodiment": "robot",
        "reference": "store brownies, clean a book, baking sugar cookies"
    },
    {
        "episode": "The robot sees a book on the table in the living room. It moves to the table and picks up the book.",
        "fact_set": "{at(book, living_room_table, T), robot_at(living_room, T), action(pick_up(book, living_room_table), T)}",
        "expert_rule": ":- action(pick_up(O, L), T), not at(O, L, T).",
        "action_type": "pick_up_precondition1",
        "positive": "true",
        "task": "retrieve book",
        "scene": "Beechwood_0_int",
        "embodiment": "robot",
        "reference": "clean a hot water dispenser, freeze lasagna"
    },
    {
        "episode": "The robot is in the kitchen and tries to pick up a mug that is actually in the living room.",
        "fact_set": "{not at(mug, kitchen, T), robot_at(kitchen, T), action(pick_up(mug, kitchen), T)}",
        "expert_rule": ":- action(pick_up(O, L), T), not at(O, L, T).",
        "action_type": "pick_up_precondition1",
        "positive": "false",
        "task": "retrieve mug",
        "scene": "Pomaria_1_int",
        "embodiment": "robot",
        "reference": "store brownies, clean a book, baking sugar cookies"
    },
    {
        "episode": "The robot, with empty hands, moves to the dining table and picks up a plate.",
        "fact_set": "{not holding(_, T), robot_at(dining_room, T), at(plate, dining_table, T), action(pick_up(plate, dining_table), T)}",
        "expert_rule": ":- action(pick_up(_, _), T), holding(_, T).",
        "action_type": "pick_up_precondition2",
        "positive": "true",
        "task": "clear table",
        "scene": "Benevolence_1_int",
        "embodiment": "robot",
        "reference": "hanging blinds, sorting volunteer materials, wash baby bottles"
    },
    {
        "episode": "The robot, while holding a book, tries to pick up a pen from the desk.",
        "fact_set": "{holding(book, T), robot_at(study_room, T), at(pen, desk, T), action(pick_up(pen, desk), T)}",
        "expert_rule": ":- action(pick_up(_, _), T), holding(_, T).",
        "action_type": "pick_up_precondition2",
        "positive": "false",
        "task": "organize desk",
        "scene": "Wainscott_1_int",
        "embodiment": "robot",
        "reference": "decorating for religious ceremony, stash snacks in your room, disinfect laundry"
    },
    {
        "episode": "The robot is in the kitchen and picks up a spatula from the kitchen counter.",
        "fact_set": "{robot_at(kitchen, T), at(spatula, kitchen_counter, T), action(pick_up(spatula, kitchen_counter), T)}",
        "expert_rule": ":- action(pick_up(O, L), T), not robot_at(L, T).",
        "action_type": "pick_up_precondition3",
        "positive": "true",
        "task": "prepare cooking utensils",
        "scene": "Merom_1_int",
        "embodiment": "robot",
        "reference": "store an uncooked turkey, drying table, clean flip flops"
    },
    {
        "episode": "The robot is in the living room and tries to pick up a book from the bedroom nightstand.",
        "fact_set": "{robot_at(living_room, T), at(book, bedroom_nightstand, T), action(pick_up(book, bedroom_nightstand), T)}",
        "expert_rule": ":- action(pick_up(O, L), T), not robot_at(L, T).",
        "action_type": "pick_up_precondition3",
        "positive": "false",
        "task": "fetch book",
        "scene": "Ihlen_0_int",
        "embodiment": "robot",
        "reference": "de-clutter your garage, sorting household items, set up a home office in your garage"
    },
    {
        "episode": "The robot picks up a book from the table in the living room and is now holding it.",
        "fact_set": "{at(book, living_room_table, T), robot_at(living_room, T), action(pick_up(book, living_room_table), T), holding(book, T+1)}",
        "expert_rule": "holding(O, T+1) :- action(pick_up(O, L), T), at(O, L, T), robot_at(L, T).",
        "action_type": "pick_up_effect1",
        "positive": "true",
        "task": "tidy living room",
        "scene": "Beechwood_0_int",
        "embodiment": "robot",
        "reference": "clean a hot water dispenser, freeze lasagna"
    },
    {
        "episode": "The robot tries to pick up a remote control from the coffee table, but it's not there.",
        "fact_set": "{not at(remote_control, coffee_table, T), robot_at(living_room, T), action(pick_up(remote_control, coffee_table), T), not holding(remote_control, T+1)}",
        "expert_rule": "holding(O, T+1) :- action(pick_up(O, L), T), at(O, L, T), robot_at(L, T).",
        "action_type": "pick_up_effect1",
        "positive": "false",
        "task": "find remote",
        "scene": "Pomaria_1_int",
        "embodiment": "robot",
        "reference": "store brownies, clean a book, baking sugar cookies"
    },
    {
        "episode": "The robot is in front of the refrigerator and opens it to get food.",
        "fact_set": "{robot_at(kitchen, T), at(refrigerator, kitchen, T), action(open(refrigerator), T)}",
        "expert_rule": ":- action(open(L), T), not robot_at(L, T).",
        "action_type": "open_precondition1",
        "positive": "true",
        "task": "prepare meal",
        "scene": "Merom_1_int",
        "embodiment": "robot",
        "reference": "store an uncooked turkey, drying table, clean flip flops"
    },
    {
        "episode": "The robot is in the living room and tries to open the bedroom closet.",
        "fact_set": "{robot_at(living_room, T), at(bedroom_closet, bedroom, T), action(open(bedroom_closet), T)}",
        "expert_rule": ":- action(open(L), T), not robot_at(L, T).",
        "action_type": "open_precondition1",
        "positive": "false",
        "task": "organize closet",
        "scene": "Benevolence_1_int",
        "embodiment": "robot",
        "reference": "hanging blinds, sorting volunteer materials, wash baby bottles"
    },
    {
        "episode": "The robot heats a frozen meal in the oven in the kitchen.",
        "fact_set": "{is_heater(oven), holding(frozen_meal, T), robot_at(kitchen, T), action(heat(frozen_meal, oven), T)}",
        "expert_rule": ":- action(heat(_, L), T), not is_heater(L).",
        "action_type": "heat_precondition1",
        "positive": "true",
        "task": "cook meal",
        "scene": "Beechwood_0_int",
        "embodiment": "robot",
        "reference": "prepare dinner, use kitchen appliances"
    },
    {
        "episode": "The robot attempts to heat a cup of coffee by placing it on a table in the living room.",
        "fact_set": "{not is_heater(table), holding(coffee_cup, T), robot_at(living_room, T), action(heat(coffee_cup, table), T)}",
        "expert_rule": ":- action(heat(_, L), T), not is_heater(L).",
        "action_type": "heat_precondition1",
        "positive": "false",
        "task": "warm beverage",
        "scene": "Pomaria_1_int",
        "embodiment": "robot",
        "reference": "arrange living room, serve drinks"
    },
    {
        "episode": "The robot successfully uses a hair dryer to warm a towel in the bathroom.",
        "fact_set": "{is_heater(hair_dryer), holding(towel, T), robot_at(bathroom, T), action(heat(towel, hair_dryer), T)}",
        "expert_rule": ":- action(heat(_, L), T), not is_heater(L).",
        "action_type": "heat_precondition1",
        "positive": "true",
        "task": "warm towel",
        "scene": "Wainscott_1_int",
        "embodiment": "robot",
        "reference": "prepare bathroom, dry items"
    },
    {
        "episode": "The robot tries to heat food by placing it in direct sunlight on a windowsill.",
        "fact_set": "{not is_heater(windowsill), holding(food_plate, T), robot_at(bedroom, T), action(heat(food_plate, windowsill), T)}",
        "expert_rule": ":- action(heat(_, L), T), not is_heater(L).",
        "action_type": "heat_precondition1",
        "positive": "false",
        "task": "warm food",
        "scene": "Merom_1_int",
        "embodiment": "robot",
        "reference": "arrange bedroom, use natural light"
    },
    {
        "episode": "The robot uses a space heater to warm up a room.",
        "fact_set": "{is_heater(space_heater), robot_at(living_room, T), action(heat(room, space_heater), T)}",
        "expert_rule": ":- action(heat(_, L), T), not is_heater(L).",
        "action_type": "heat_precondition1",
        "positive": "true",
        "task": "warm room",
        "scene": "Benevolence_1_int",
        "embodiment": "robot",
        "reference": "control room temperature, use portable appliances"
    },
    {
        "episode": "The robot, holding a cold cup of coffee, uses the microwave to heat it.",
        "fact_set": "{holding(cold_coffee, T), robot_at(kitchen, T), is_heater(microwave), action(heat(cold_coffee, microwave), T)}",
        "expert_rule": ":- action(heat(O, L), T), not holding(O, T).",
        "action_type": "heat_precondition2",
        "positive": "true",
        "task": "reheat beverage",
        "scene": "Beechwood_0_int",
        "embodiment": "robot",
        "reference": "clean a hot water dispenser, freeze lasagna"
    },
    {
        "episode": "The robot tries to heat a plate of food in the microwave without picking it up first.",
        "fact_set": "{not holding(food_plate, T), robot_at(kitchen, T), is_heater(microwave), action(heat(food_plate, microwave), T)}",
        "expert_rule": ":- action(heat(O, L), T), not holding(O, T).",
        "action_type": "heat_precondition2",
        "positive": "false",
        "task": "reheat meal",
        "scene": "Pomaria_1_int",
        "embodiment": "robot",
        "reference": "store brownies, clean a book, baking sugar cookies"
    },
    {
        "episode": "The robot is in the kitchen, holding a bowl of soup, and uses the microwave to heat it.",
        "fact_set": "{holding(soup_bowl, T), robot_at(kitchen, T), is_heater(microwave), action(heat(soup_bowl, microwave), T)}",
        "expert_rule": ":- action(heat(_, L), T), not robot_at(L, T).",
        "action_type": "heat_precondition3",
        "positive": "true",
        "task": "prepare meal",
        "scene": "Merom_1_int",
        "embodiment": "robot",
        "reference": "store an uncooked turkey, drying table, clean flip flops"
    },
    {
        "episode": "The robot is in the kitchen, holding a bowl of soup, and uses the microwave to heat it.",
        "fact_set": "{holding(soup_bowl, T), robot_at(kitchen, T), is_heater(microwave), action(heat(soup_bowl, microwave), T)}",
        "expert_rule": ":- action(heat(_, L), T), not robot_at(L, T).",
        "action_type": "heat_precondition3",
        "positive": "true",
        "task": "prepare meal",
        "scene": "Merom_1_int",
        "embodiment": "robot",
        "reference": "store an uncooked turkey, drying table, clean flip flops"
    },
    {
        "episode": "The robot remains in the kitchen while preparing a meal.",
        "fact_set": "{robot_at(kitchen, T), not action(go_to(_), T), step(T+1), robot_at(kitchen, T+1)}",
        "expert_rule": "robot_at(L, T+1) :- robot_at(L, T), not action(go_to(_), T), step(T+1).",
        "action_type": "goto_effect1",
        "positive": "true",
        "task": "prepare meal",
        "scene": "Merom_1_int",
        "embodiment": "robot",
        "reference": "store an uncooked turkey, drying table, clean flip flops"
    },
    {
        "episode": "The robot moves from the living room to the kitchen.",
        "fact_set": "{robot_at(living_room, T), action(go_to(kitchen), T), step(T+1), robot_at(kitchen, T+1)}",
        "expert_rule": "robot_at(L, T+1) :- robot_at(L, T), not action(go_to(_), T), step(T+1).",
        "action_type": "goto_effect1",
        "positive": "false",
        "task": "navigate rooms",
        "scene": "Benevolence_1_int",
        "embodiment": "robot",
        "reference": "hanging blinds, sorting volunteer materials, wash baby bottles"
    },
    {
        "episode": "The robot tries to cool a hot plate by placing it on the kitchen counter.",
        "fact_set": "{holding(hot_plate, T), robot_at(kitchen, T), not is_cooler(kitchen_counter), action(cool(hot_plate, kitchen_counter), T)}",
        "expert_rule": ":- action(cool(_, L), T), not is_cooler(L).",
        "action_type": "cool_precondition1",
        "positive": "false",
        "task": "serve meal",
        "scene": "Ihlen_0_int",
        "embodiment": "robot",
        "reference": "de-clutter your garage, sorting household items, set up a home office in your garage"
    },
    {
        "episode": "The robot places a warm drink in the refrigerator to cool it down.",
        "fact_set": "{holding(warm_drink, T), robot_at(kitchen, T), is_cooler(refrigerator), action(cool(warm_drink, refrigerator), T)}",
        "expert_rule": ":- action(cool(_, L), T), not is_cooler(L).",
        "action_type": "cool_precondition1",
        "positive": "true",
        "task": "prepare beverage",
        "scene": "Wainscott_1_int",
        "embodiment": "robot",
        "reference": "decorating for religious ceremony, stash snacks in your room, disinfect laundry"
    },
    {
        "episode": "The robot, holding a hot drink, places it in the refrigerator to cool it down.",
        "fact_set": "{holding(hot_drink, T), robot_at(kitchen, T), is_cooler(refrigerator), action(cool(hot_drink, refrigerator), T)}",
        "expert_rule": ":- action(cool(O, L), T), not holding(O, T).",
        "action_type": "cool_precondition2",
        "positive": "true",
        "task": "prepare cold drink",
        "scene": "Merom_1_int",
        "embodiment": "robot",
        "reference": "store an uncooked turkey, drying table, clean flip flops"
    },
    {
        "episode": "The robot attempts to cool a hot dish in the freezer without picking it up.",
        "fact_set": "{not holding(hot_dish, T), robot_at(kitchen, T), is_cooler(freezer), action(cool(hot_dish, freezer), T)}",
        "expert_rule": ":- action(cool(O, L), T), not holding(O, T).",
        "action_type": "cool_precondition2",
        "positive": "false",
        "task": "cool down food",
        "scene": "Benevolence_1_int",
        "embodiment": "robot",
        "reference": "hanging blinds, sorting volunteer materials, wash baby bottles"
    },
    {
        "episode": "The robot, in the kitchen, puts a warm soda can into the refrigerator to cool it.",
        "fact_set": "{holding(warm_soda, T), robot_at(kitchen, T), is_cooler(refrigerator), action(cool(warm_soda, refrigerator), T)}",
        "expert_rule": ":- action(cool(_, L), T), not robot_at(L, T).",
        "action_type": "cool_precondition3",
        "positive": "true",
        "task": "prepare cold drink",
        "scene": "Wainscott_1_int",
        "embodiment": "robot",
        "reference": "decorating for religious ceremony, stash snacks in your room, disinfect laundry"
    },
    {
        "episode": "The robot, in the living room, tries to cool a hot pizza in the kitchen refrigerator.",
        "fact_set": "{holding(hot_pizza, T), robot_at(living_room, T), is_cooler(refrigerator), action(cool(hot_pizza, refrigerator), T)}",
        "expert_rule": ":- action(cool(_, L), T), not robot_at(L, T).",
        "action_type": "cool_precondition3",
        "positive": "false",
        "task": "cool down food",
        "scene": "Ihlen_0_int",
        "embodiment": "robot",
        "reference": "de-clutter your garage, sorting household items, set up a home office in your garage"
    },
    {
        "episode": "The robot uses the vacuum cleaner to clean the living room carpet.",
        "fact_set": "{robot_at(living_room, T), is_cleaner(vacuum_cleaner), action(clean(carpet, vacuum_cleaner), T)}",
        "expert_rule": ":- action(clean(_, L), T), not is_cleaner(L).",
        "action_type": "clean_precondition1",
        "positive": "true",
        "task": "clean living room",
        "scene": "Beechwood_0_int",
        "embodiment": "robot",
        "reference": "clean a hot water dispenser, freeze lasagna"
    },
    {
        "episode": "The robot tries to clean a dirty dish using a book in the study.",
        "fact_set": "{holding(dirty_dish, T), robot_at(study, T), not is_cleaner(book), action(clean(dirty_dish, book), T)}",
        "expert_rule": ":- action(clean(_, L), T), not is_cleaner(L).",
        "action_type": "clean_precondition1",
        "positive": "false",
        "task": "clean dishes",
        "scene": "Pomaria_1_int",
        "embodiment": "robot",
        "reference": "store brownies, clean a book, baking sugar cookies"
    },
    {
        "episode": "The robot, holding a dirty plate, uses the dishwasher to clean it.",
        "fact_set": "{holding(dirty_plate, T), robot_at(kitchen, T), is_cleaner(dishwasher), action(clean(dirty_plate, dishwasher), T)}",
        "expert_rule": ":- action(clean(O, L), T), not holding(O, T).",
        "action_type": "clean_precondition2",
        "positive": "true",
        "task": "wash dishes",
        "scene": "Beechwood_0_int",
        "embodiment": "robot",
        "reference": "clean a hot water dispenser, freeze lasagna"
    },
    {
        "episode": "The robot tries to clean a dirty shirt in the washing machine without picking it up first.",
        "fact_set": "{not holding(dirty_shirt, T), robot_at(laundry_room, T), is_cleaner(washing_machine), action(clean(dirty_shirt, washing_machine), T)}",
        "expert_rule": ":- action(clean(O, L), T), not holding(O, T).",
        "action_type": "clean_precondition2",
        "positive": "false",
        "task": "do laundry",
        "scene": "Pomaria_1_int",
        "embodiment": "robot",
        "reference": "store brownies, clean a book, baking sugar cookies"
    },
    {
        "episode": "The robot, in the kitchen, puts a warm soda can into the refrigerator to cool it.",
        "fact_set": "{holding(warm_soda, T), robot_at(kitchen, T), is_cooler(refrigerator), action(cool(warm_soda, refrigerator), T)}",
        "expert_rule": ":- action(cool(_, L), T), not robot_at(L, T).",
        "action_type": "cool_precondition3",
        "positive": "true",
        "task": "prepare cold drink",
        "scene": "Wainscott_1_int",
        "embodiment": "robot",
        "reference": "decorating for religious ceremony, stash snacks in your room, disinfect laundry"
    },
    {
        "episode": "The robot, in the living room, tries to cool a hot pizza in the kitchen refrigerator.",
        "fact_set": "{holding(hot_pizza, T), robot_at(living_room, T), is_cooler(refrigerator), action(cool(hot_pizza, refrigerator), T)}",
        "expert_rule": ":- action(cool(_, L), T), not robot_at(L, T).",
        "action_type": "cool_precondition3",
        "positive": "false",
        "task": "cool down food",
        "scene": "Ihlen_0_int",
        "embodiment": "robot",
        "reference": "de-clutter your garage, sorting household items, set up a home office in your garage"
    }
]